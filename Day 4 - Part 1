import java.io.File;
import java.io.FileNotFoundException;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


public class Day4 {
    public static void main(String[] args) {

        ArrayList<String> fileData = getFileData("src/input.txt");
        int rows = fileData.size();
        int columns = fileData.getFirst().length();
        String[][] grid = new String[rows][columns];
        int result = 0;
        for (int r = 0; r < grid.length; r++) {
            for (int c = 0; c < grid[0].length; c++) {
                grid[r][c] = fileData.get(r).substring(c, c+1);
            }
        }
        for (String[] s : grid){
            System.out.println(Arrays.toString(s));
        }
//        System.out.println(Arrays.deepToString(grid));
        for(int row = 0; row < grid.length; row++){
            for(int col = 0; col < grid[row].length; col++){
                System.out.println("current position: " + row + " " + col);
                if(row+3<grid.length&&col+3<grid[row].length){
                    if (checkRightDiagonal(grid[row][col], grid, row, col)) {
                        result++;
                        System.out.println("new result: " + result + " rightdiag" + " position: (" + row + "," + col + ")");
                    }
                }
                if(row+3<grid.length&&col-3>=0) {
                    if (checkLeftDiagonal(grid[row][col], grid, row, col)) {
                        result++;
                        System.out.println("new result: " + result + " leftdiag" + " position: (" + row + "," + col + ")");
                    }
                }
                if(col+3<grid[row].length) {
                    if (checkForwards(grid[row][col], grid, row, col)) {
                        result++;
                        System.out.println("new result: " + result + " forward" + " position: (" + row + "," + col + ")");
                    }
                }
                if(row+3<grid.length) {
                    if (checkDownwards(grid[row][col], grid, row, col)) {
                        result++;
                        System.out.println("new result: " + result +  " down" + " position: (" + row + "," + col + ")");
                    }
                }
            }
        }
        System.out.println(result);
    }
    public static boolean checkRightDiagonal(String input, String[][] arr, int r, int c){
        if(input.equals("X")) {
            if (arr[r + 1][c + 1].equals("M")) {
                if (arr[r + 2][c + 2].equals("A")) {
                    if (arr[r + 3][c + 3].equals("S")) {
                        return true;
                    }
                }
            }
        }
        if(input.equals("S")) {
            if (arr[r + 1][c + 1].equals("A")) {
                if (arr[r + 2][c + 2].equals("M")) {
                    if (arr[r + 3][c + 3].equals("X")) {
                        return true;
                    }
                }
            }
        }
//        System.out.println(r + " " + c + "rightdiag");
        return false;
    }
    public static boolean checkForwards(String input, String[][] arr, int r, int c){
        if(input.equals("X")) {
            if (arr[r][c + 1].equals("M")) {
                if (arr[r][c + 2].equals("A")) {
                    if (arr[r][c + 3].equals("S")) {
                        return true;
                    }
                }
            }
        }
        if(input.equals("S")) {
            if (arr[r][c + 1].equals("A")) {
                if (arr[r][c + 2].equals("M")) {
                    if (arr[r][c + 3].equals("X")) {
                        return true;
                    }
                }
            }
        }
//        System.out.println(r + " " + c + "forwards");
        return false;
    }
    public static boolean checkDownwards(String input, String[][] arr, int r, int c){
        if(input.equals("X")) {
            if (arr[r + 1][c ].equals("M")) {
                if (arr[r + 2][c ].equals("A")) {
                    if (arr[r + 3][c ].equals("S")) {
                        return true;
                    }
                }
            }
        }
        if(input.equals("S")) {
            if (arr[r + 1][c].equals("A")) {
                if (arr[r + 2][c].equals("M")) {
                    if (arr[r + 3][c].equals("X")) {
                        return true;
                    }
                }
            }
        }
//        System.out.println(r + " " + c + "down");
        return false;
    }
    public static boolean checkLeftDiagonal(String input, String[][] arr, int r, int c){
        if(input.equals("X")) {
            if (arr[r + 1][c - 1].equals("M")) {
                if (arr[r + 2][c - 2].equals("A")) {
                    if (arr[r + 3][c - 3].equals("S")) {
                        return true;
                    }
                }
            }
        }
        if(input.equals("S")) {
            if (arr[r + 1][c - 1].equals("A")) {
                if (arr[r + 2][c - 2].equals("M")) {
                    if (arr[r + 3][c - 3].equals("X")) {
                        return true;
                    }
                }
            }
        }
//        System.out.println(r + " " + c + "leftdiag");
        return false;
    }

    public static ArrayList<String> getFileData(String fileName) {
        ArrayList<String> fileData = new ArrayList<String>();
        try {
            File f = new File(fileName);
            Scanner s = new Scanner(f);
            while (s.hasNextLine()) {
                String line = s.nextLine();
                if (!line.equals(""))
                    fileData.add(line);
            }
            return fileData;
        }
        catch (FileNotFoundException e) {
            return fileData;
        }
    }
}
